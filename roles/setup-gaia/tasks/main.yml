---
- name: Download go install script
  get_url:
    url: "https://raw.githubusercontent.com/canha/golang-tools-install-script/master/goinstall.sh"
    dest: "{{ ansible_env.HOME }}/goinstall.sh"
    mode: 0755
    force: true
  become: true

- name: Check if go is installed
  command: command -v go
  register: go_installed
  ignore_errors: true

- name: Install go
  command: "{{ ansible_env.HOME }}/goinstall.sh"
  when: not go_installed
  
- name: Stop gaiad
  service:
    name: gaiad
    state: stopped
  become: true
  ignore_errors: true

- name: Clone cosmos SDK
  git:
    repo: "https://github.com/cosmos/cosmos-sdk"
    dest: "{{ ansible_env.HOME }}/cosmos-sdk"
    update: yes
    force: yes

- name: Get latest Althea genesis.json file
  get_url:
    url: "https://raw.githubusercontent.com/althea-net/althea-zone/master/genesis.json"
    dest: "{{ ansible_env.HOME }}/genesis.json"
    mode: 0755
    force: true

- name: Check for changes to the genesis file
  command: cmp -s "{{ ansible_env.HOME }}/genesis.json {{ ansible_env.HOME }}/.gaid/config/genesis.json }}"
  register: new_genesis
  ignore_errors: true

- name: Remove gaiad folder
  shell: rm -rf {{ ansible_env.HOME }}/.gaiad
  args:
    warn: no
  become: true
  when: new_genesis

- name: Create config directory
  file:
    path: "{{ ansible_env.HOME }}/.gaiad/config"
    state: directory
    mode: '0755'
  when: new_genesis

- name: Install genesis file
  copy:
    src: "{{ ansible_env.HOME }}/genesis.json"
    dest: "{{ ansible_env.HOME }}/.gaiad/config/genesis.json"
    remote_src: yes
  when: new_genesis

- name: Check if gaia is installed
  command: command -v gaiad
  register: gaiad_installed
  ignore_errors: true

- name: Setup gaia
  block:
  - name: Install gaia
    shell: "cd {{ ansible_env.HOME }}/cosmos-sdk && git checkout v0.35.0 && make install"

  - name: Strip /stargate from connect-src
    shell: sed -i "s/althea.zone\/stargate/althea.zone/g" /var/lunie/dist/index.html

  - name: Template gaiad service file
    template:
      src: "gaiad.service.j2"
      dest: "/etc/systemd/system/gaiad.service"
    become: true

  - name: Set gaiad to run on startup
    systemd:
      daemon_reload: yes
      name: gaiad
      state: restarted
      enabled: yes
    become: true

  - name: Wait for Quick crashes
    pause:
      seconds: 5

  - name: Check if gaia is running
    command: systemctl status gaiad
    ignore_errors: yes
    changed_when: false
    register: service_gaiad_status

  - name: Report status of gaiad
    fail:
      msg: |
        Service gaiad is not running.
        Output of `systemctl status gaiad`:
        {{ service_gaiad_status.stdout }}
        {{ service_gaiad_status.stderr }}
    when: service_gaiad_status is failed

  - name: Get latest Althea seeds
    get_url:
      url: "https://raw.githubusercontent.com/althea-net/althea-zone/master/seeds"
      dest: "{{ ansible_env.HOME }}/seeds"
      mode: 0755
      force: true

  - name: Add seeds to config
    shell: sed -i "s/seeds = \"\"/seeds = \"20d682e14b3bb1f8dbdb0492ea5f401c0c088163@198.245.51.51:26656\"/g" {{ ansible_env.HOME }}/.gaiad/config/config.toml
    args:
      warn: no
    when: service_gaiad_status is succeeded

  - name: Restart gaiad
    systemd:
      daemon_reload: yes
      name: gaiad
      state: restarted
      enabled: yes
    become: true

  - name: Template gaiacli service file
    template:
      src: "gaiacli.service.j2"
      dest: "/etc/systemd/system/gaiacli.service"
    become: true

  - name: Set gaiacli to run on startup
    systemd:
      daemon_reload: yes
      name: gaiacli
      state: restarted
      enabled: yes
    become: true

  - name: Wait for Quick crashes
    pause:
      seconds: 5

  - name: Check if gaiacli is running
    command: systemctl status gaiacli
    ignore_errors: yes
    changed_when: false
    register: service_gaiacli_status

  - name: Report status of gaiacli
    fail:
      msg: |
        Service gaiacli is not running.
        Output of `systemctl status gaiacli`:
        {{ service_gaiacli_status.stdout }}
        {{ service_gaiacli_status.stderr }}
    when: service_gaiacli_status is failed

